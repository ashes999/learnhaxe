<?xml version="1.0" encoding="utf-8"?>
      <feed xmlns="http://www.w3.org/2005/Atom">
        <title>Learn Haxe</title>
        <link href="http://ashes999.github.io/learnhaxe" />
        <id>urn:uuid:51e6386ca9155b4889db67f17ba6089f</id>
  	    <updated>2016-03-30T00:00:00Z</updated><entry>
      		<title>Deserializing Class Instances From Json</title>
          <link href="http://ashes999.github.io/learnhaxe/deserializing-class-instances-from-json" />
      		<id>urn:uuid:bb1689ef576deb85044a94ac76e98bf6</id>
      		<updated>2016-03-30T00:00:00Z</updated>
      		<summary>Deserializing Class Instances From Json</summary>
      		<content type="xhtml">
      			&lt;p&gt;If you google for how to deserialize some JSON into a Haxe class, you will most likely find &lt;a href="http://haxe.org/manual/std-Json-parsing.html"&gt;this API page on JSON parsing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While this method allows you to deserialize JSON into a struct, it only works with a &lt;code&gt;typedef&lt;/code&gt;. It won't work with an actual class (something that has methods).&lt;/p&gt;
&lt;p&gt;The good news is that it is possible to deserialize to a class instance; the bad news is that it relies on reflection. The snippet below uses reflection to iterate over all fields in the &lt;code&gt;dynamic&lt;/code&gt; instance returned by &lt;code&gt;haxe.json.parse&lt;/code&gt;, and reflectively sets the values on &lt;code&gt;myInstance&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var raw = haxe.Json.parse(sys.io.File.getContent(configFile));
var myInstance:WhateverClassYouWant = new WhateverClassYouWant();

var structsFields:Array&amp;lt;String&amp;gt; = Reflect.fields(raw);
var classFields:Array&amp;lt;String&amp;gt; = Type.getInstanceFields(Type.getClass(myInstance));

for (field in structsFields)
{
    if (classFields.indexOf(field) &amp;gt; -1)
    {
        var value:Dynamic = Reflect.field(raw, field);
        Reflect.setField(myInstance, field, value);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A couple of caveats to pay attention to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We only set the field on &lt;code&gt;myInstance&lt;/code&gt; if it exists. This is safer than trusting the JSON blindly.&lt;/li&gt;&lt;li&gt;Any fields that aren't in &lt;code&gt;raw&lt;/code&gt; (or in the JSON) won't be set, and will have their default values.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;As it stands, this solution can work pretty well as a class deserializer. You can use a similar method to reflect and serialize a class to JSON.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Haxeflixel in Cloud9</title>
          <link href="http://ashes999.github.io/learnhaxe/haxeflixel-in-cloud9" />
      		<id>urn:uuid:3741e7b78126e1586fbca302ff187643</id>
      		<updated>2016-03-12T00:00:00Z</updated>
      		<summary>Haxeflixel in Cloud9</summary>
      		<content type="xhtml">
      			&lt;p&gt;&lt;a href="https://c9.io/"&gt;Cloud9&lt;/a&gt; provides remote, cloud-based development enviornments. Under the hood, they provision you a Linux VM with Docker. By default, they provide pre-build environments for Rails, C++, PHP, and other enviornments. But not Haxe.&lt;/p&gt;
&lt;p&gt;It turns out that setting up Haxe, OpenFL, and HaxeFlixel is really simple.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For Haxe, &lt;a href="http://haxe.org/download/"&gt;download&lt;/a&gt; and run the Linux 64-bit binaries. (Copy the &lt;code&gt;tar&lt;/code&gt; URL, eg. &lt;code&gt;http://haxe.org/download/file/3.2.1/haxe-3.2.1-linux64.tar.gz&lt;/code&gt;, and grab it via &lt;code&gt;curl &amp;lt;url&amp;gt;&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;For OpenFL, run &lt;code&gt;haxelib install openfl&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;For HaxeFlixel, run &lt;code&gt;haxelib install flixel&lt;/code&gt;. (Don't forget to install and setup &lt;code&gt;flixel-tools&lt;/code&gt; too.)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;That's it! You can build your Haxe apps, or your OpenFL/HaxeFlixel games in Flash. To view them:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Find the binary in the workspace view&lt;/li&gt;&lt;li&gt;Right-click and pick Preview&lt;/li&gt;&lt;li&gt;Click the square/arrows icon to open in a new tab&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This opens the SWF in a new window/tab where it runs properly.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Hue Rotating Sprites in HaxeFlixel</title>
          <link href="http://ashes999.github.io/learnhaxe/hue-rotating-sprites-in-haxeflixel" />
      		<id>urn:uuid:eb29021aa54bd67a78caeea77a433e49</id>
      		<updated>2016-02-21T00:00:00Z</updated>
      		<summary>Hue Rotating Sprites in HaxeFlixel</summary>
      		<content type="xhtml">
      			&lt;p&gt;I began a quest to answer a question: can I hue rotate sprites, within HaxeFlixel itself?  The answer is &lt;em&gt;yes&lt;/em&gt;, although it requires a non-trivial amount of work.&lt;/p&gt;
&lt;p&gt;The first clue is that the HaxeFlixel &lt;code&gt;FlxSprite&lt;/code&gt; class contains a &lt;code&gt;pixels&lt;/code&gt; field, which contains &lt;code&gt;BitmapData&lt;/code&gt;; a list of actual pixel values (colours in the format &lt;code&gt;0xRRGGBB&lt;/code&gt;) which you can access (and manipulate). My first try included changing these via &lt;a href="http://stackoverflow.com/a/8509802/210780"&gt;this formula&lt;/a&gt;; the results looked strange.&lt;/p&gt;
&lt;p&gt;I abandoned that route and decided to use &lt;a href="http://stackoverflow.com/a/8510751/210780"&gt;this method&lt;/a&gt;, which uses a matrix to multiply the RGB component values based on the hue rotation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BitmapData&lt;/code&gt; has an &lt;a href="http://api.haxeflixel.com/flash/display/BitmapData.html#applyFilter"&gt;applyFilter method&lt;/a&gt;. For the final &lt;code&gt;filter&lt;/code&gt; parameter, which lacks documentation, you can pass in an instance of &lt;code&gt;ColorMatrixFilter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ColorMatrixFilter&lt;/code&gt; doesn't appear in the HaxeFlixel docs (it's &lt;a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/filters/ColorMatrixFilter.html"&gt;from Flash&lt;/a&gt;). You pass in the values for a 5x4 matrix; the first three columns of the first three rows take in RGB values.&lt;/p&gt;
&lt;p&gt;I translated and passed in the values provided in the Stack Overflow answer above; it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var hueRotation:Int = 0; // degrees. Tested with values from 0...359
// cosA and sinA are in radians
var cosA:Float = Math.cos(hueRotation * Math.PI / 180);
var sinA:Float = Math.sin(hueRotation * Math.PI / 180);

sprite.pixels.applyFilter(sprite.pixels, sprite.pixels.rect, new Point(), new ColorMatrixFilter(
  [cosA + (1.0 - cosA) / 3.0, 1.0/3.0 * (1.0 - cosA) - Math.sqrt(1.0/3.0) * sinA, 1.0/3.0 * (1.0 - cosA) + Math.sqrt(1.0/3.0) * sinA, 0, 0,
  1.0/3.0 * (1.0 - cosA) + Math.sqrt(1.0/3.0) * sinA, cosA + 1.0/3.0*(1.0 - cosA), 1.0/3.0 * (1.0 - cosA) - Math.sqrt(1.0/3.0) * sinA, 0, 0,
  1.0/3.0 * (1.0 - cosA) - Math.sqrt(1.0/3.0) * sinA, 1.0/3.0 * (1.0 - cosA) + Math.sqrt(1.0/3.0) * sinA, cosA + 1.0/3.0 * (1.0 - cosA), 0, 0,
  0, 0, 0, 1, 0])); // identity row&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output worked:&lt;/p&gt;
&lt;p&gt;&lt;img src="content/images/hue-rotation.png" alt="Hue Rotation Sample Image" /&gt;&lt;/p&gt;
&lt;p&gt;Three three things didn't work as expected:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I used several copies of the same image, and every copy looked the same. It turns out that HaxeFlixel shares &lt;code&gt;BitmapData&lt;/code&gt; across instances of the same sprite; I bypassed this by setting &lt;code&gt;sprite.pixels = sprite.pixels.clone()&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The effect didn't apply on Flash. For Flash, you need to add &lt;code&gt;sprite.dirty = true&lt;/code&gt; (possibly in a &lt;code&gt;#if flash&lt;/code&gt; ... &lt;code&gt;#end&lt;/code&gt; block).&lt;/li&gt;&lt;li&gt;The colours are slightly off. If you rotate a simple block of colours (red, green, blue, and white), you see that the colours appear a bit darker than they should be (compare it to what you get in GIMP):&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src="content/images/color-skew.png" alt="Off-colors" /&gt;&lt;/p&gt;
&lt;p&gt;The result looks great.  And the performance? In my case, I intended to hue-rotate sprites once (and keep them at that hue forever). Manipulating the sprite's &lt;code&gt;.pixels&lt;/code&gt; directly is the same as loadimg a graphic that already has the transformation -- there's no additional cost in each frame if we only do this once when the sprite is created. (Thanks to &lt;a href="https://github.com/gama11"&gt;Gama11&lt;/a&gt; for pointing this out.)&lt;/p&gt;
&lt;p&gt;For the time being, you can view the complete HaxeFlixel proof-of-concept project &lt;a href="https://github.com/ashes999/haxeflixel-hue-rotation"&gt;here, on GitHub&lt;/a&gt;.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Iterate Over all Fields of Anonymous Structures in Haxe</title>
          <link href="http://ashes999.github.io/learnhaxe/iterate-over-all-fields-of-anonymous-structures-in-haxe" />
      		<id>urn:uuid:94a7e75dcb116844746188990b45172b</id>
      		<updated>2016-02-17T00:00:00Z</updated>
      		<summary>Iterate Over all Fields of Anonymous Structures in Haxe</summary>
      		<content type="xhtml">
      			&lt;p&gt;How do you iterate over all fields of an &lt;a href="http://haxe.org/manual/types-anonymous-structure.html"&gt;anonymous structure&lt;/a&gt; (possibly behind a &lt;code&gt;typedef&lt;/code&gt;) in Haxe and print out all the values?&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://haxe.org/manual/std-reflection.html"&gt;Haxe reflection docs&lt;/a&gt; suggest:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reflection API consists of two classes:
- Reflect: A lightweight API which work best on anonymous structures, with limited support for classes.
- Type: A more robust API for working with classes and enums.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Reflect&lt;/code&gt; seems promising. From perusing the API docs, I noticed a &lt;code&gt;fields&lt;/code&gt; method. &lt;a href="http://api.haxe.org/Reflect.html#fields"&gt;The docs&lt;/a&gt; say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;static fields (o:Dynamic):Array&lt;String&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Returns the fields of structure o.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This method is only guaranteed to work on anonymous structures. Refer to Type.getInstanceFields for a function supporting class instances.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That looks promising. Running &lt;code&gt;Reflect.fields({ "name": "Butterfly", "version": "0.3" })&lt;/code&gt; gives me the array &lt;code&gt;["name", "version"]&lt;/code&gt; back.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Reflect&lt;/code&gt; also includes &lt;a href="http://api.haxe.org/Reflect.html#getProperty"&gt;a &lt;code&gt;getProperty&lt;/code&gt; method&lt;/a&gt;, which returns the value of a property. Plug this into a for-loop, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var target = { "name": "Butterfly", "version": "0.3" };
var fields = Reflect.fields(target);
for (field in fields) {
  var value = Reflect.getProperty(target, field);
  trace('${field} =&amp;gt; ${value}');
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This traces:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;name =&gt; Butterfly
version =&gt; 0.3&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Also, note that Reflect also &lt;a href="http://api.haxe.org/Reflect.html#field"&gt;contains a &lt;code&gt;field&lt;/code&gt; method&lt;/a&gt; which is syntactically similar to &lt;code&gt;getProperty&lt;/code&gt; (same inputs and outputs); the difference is that &lt;code&gt;field&lt;/code&gt; ignores accessors, while &lt;code&gt;getProperty&lt;/code&gt; applies accessors.&lt;/p&gt;
&lt;p&gt;Given the choice, in this specific case of anonymous structures, I would use &lt;code&gt;field&lt;/code&gt; instead of &lt;code&gt;getProperty&lt;/code&gt; for readability.  This:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for (var field in Reflect.fields(target)) { Reflect.field(...) }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reads more sensibly than:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for (var field in Reflect.fields(target)) { Reflect.getProperty(...) }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you apply this on something other than an anonymous structure, you should probably opt for &lt;code&gt;getProperty&lt;/code&gt; instead.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Dynamically Adding and Reloading Assets in Haxeflixel</title>
          <link href="http://ashes999.github.io/learnhaxe/dynamically-adding-and-reloading-assets-in-haxeflixel" />
      		<id>urn:uuid:7831ef7024bdda0da3c935848e7e6c2d</id>
      		<updated>2016-01-20T00:00:00Z</updated>
      		<summary>Dynamically Adding and Reloading Assets in Haxeflixel</summary>
      		<content type="xhtml">
      			&lt;p&gt;Yes, you can dynamically load (and reload) assets at runtime in your HaxeFlixel project, courtesy of OpenFL. (Caveat: I tried all this on Neko, although it should work equally on any platform.)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;First, run your project via &lt;code&gt;lime test neko&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Second, add (or modify) your assets to the &lt;code&gt;assets&lt;/code&gt; directory.&lt;/li&gt;&lt;li&gt;Finally, run &lt;code&gt;lime update neko&lt;/code&gt;. This copies and re-bundles the assets, in a way that the running process can access them.&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Internal Details&lt;/h2&gt;
&lt;p&gt;When you run your lime project, it actually creates a copies of the &lt;code&gt;assets&lt;/code&gt; directory in &lt;code&gt;export/&amp;lt;os name&amp;gt;/neko/bin&lt;/code&gt;. Interestingly, copying your asset files here isn't enough; you still need to run &lt;code&gt;lime update neko&lt;/code&gt; to make them accessible to the running game.&lt;/p&gt;
&lt;p&gt;Also, when the assets reload, they become available to calls like &lt;code&gt;getBitmapData&lt;/code&gt; et all. These calls are already (currently) used by HaxeFlixel, so you don't need to do anything more to load them.&lt;/p&gt;
&lt;p&gt;You can see how easy it is to reload assets for a live project, while debugging! I'm sure there are many, many creative possibilities for this (like creating an interactive game editor ...)&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Logitech F310 Support in HaxeFlixel</title>
          <link href="http://ashes999.github.io/learnhaxe/logitech-f310-support-in-haxeflixel" />
      		<id>urn:uuid:5b3cc642376ebcf61b696095ee76478e</id>
      		<updated>2016-01-12T00:00:00Z</updated>
      		<summary>Logitech F310 Support in HaxeFlixel</summary>
      		<content type="xhtml">
      			&lt;p&gt;I recently received a &lt;a href="http://gaming.logitech.com/en-us/product/f310-gamepad"&gt;Logitech F310 gamepad&lt;/a&gt;. Since HaxeFlixel already &lt;a href="http://api.haxeflixel.com/flixel/input/gamepad/FlxGamepad.html"&gt;has gamepad support&lt;/a&gt; (buttons, deadzone, D-Pad, etc.), including support for &lt;a href="http://api.haxeflixel.com/flixel/input/gamepad/LogitechButtonID.html"&gt;reading Logitech button input&lt;/a&gt;, I figured it would work out-of-the-box, right?&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;It turns out that the &lt;code&gt;LogitechButtonID&lt;/code&gt; class contains values based on the &lt;strong&gt;Cordless Rumblepad 2&lt;/strong&gt; controller. If you look &lt;a href="https://www.google.com/search?site=&amp;amp;tbm=isch&amp;amp;source=hp&amp;amp;biw=1440&amp;amp;bih=799&amp;amp;q=rumblepad+2&amp;amp;oq=rumblepad+2&amp;amp;gs_l=img.3..0j0i5i30l9.662.1846.0.1959.11.10.0.1.1.0.151.963.4j5.9.0....0...1ac.1.64.img..1.10.964.x4VlaV7zemA"&gt;at screenshots&lt;/a&gt;, you'll notice the pads all have numbers on them.&lt;/p&gt;
&lt;p&gt;That's no good -- the F310 uses &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;Y&lt;/code&gt; for buttons, with left and right triggers (&lt;code&gt;LB&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt; respectively). Fortunately, the LogitechButtonID class' comments indicate which value applise to which button; these values match up exactly with the F310.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static inline read only FOUR:Int = 11
Placement equivalent to 'Y' button on the Xbox 360 controller&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That only leaves the D-Pads. The built in enum values don't work; instead, I used &lt;a href="https://github.com/HaxeFlixel/flixel/blob/master/flixel/input/gamepad/FlxGamepad.hx#L39"&gt;the four &lt;code&gt;dpad*&lt;/code&gt; properties&lt;/a&gt; defined on the controller itself; these work perfectly.&lt;/p&gt;
&lt;p&gt;If you want to try this for yourself, it's quite easy:&lt;/p&gt;
&lt;p&gt;1) Run &lt;code&gt;flixel create&lt;/code&gt; and then select demo &lt;code&gt;34&lt;/code&gt;, &lt;code&gt;GamepadTest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;2) Replace the contents of the &lt;code&gt;GamepadIDs&lt;/code&gt; class with the correct button enum values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static inline var A = LogitechButtonID.TWO;
public static inline var B = LogitechButtonID.THREE;
public static inline var X = LogitechButtonID.ONE;
public static inline var Y = LogitechButtonID.FOUR;
public static inline var LB = LogitechButtonID.FIVE;
public static inline var RB = LogitechButtonID.SIX;
public static inline var START = LogitechButtonID.TEN;
public static inline var SELECT = LogitechButtonID.NINE;
public static inline var LEFT_ANALOGUE = LogitechButtonID.LEFT_ANALOGUE;
public static inline var RIGHT_ANALOGUE = LogitechButtonID.RIGHT_ANALOGUE;
public static inline var LEFT_ANALOGUE_X = LogitechButtonID.LEFT_ANALOGUE_X;
public static inline var LEFT_ANALOGUE_Y = LogitechButtonID.LEFT_ANALOGUE_Y;
public static inline var RIGHT_ANALOGUE_X = LogitechButtonID.RIGHT_ANALOGUE_X;
public static inline var RIGHT_ANALOGUE_Y =  LogitechButtonID.RIGHT_ANALOGUE_Y;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3) Modify &lt;code&gt;PlayState.hx&lt;/code&gt;'s &lt;code&gt;updateDpad&lt;/code&gt; function; the values assigned to the four &lt;code&gt;dpad*&lt;/code&gt; variables should be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var dpadLeft = _gamePad.dpadLeft;
var dpadRight = _gamePad.dpadRight;
var dpadUp = _gamePad.dpadUp;
var dpadDown = _gamePad.dpadDown;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;lime test neko&lt;/code&gt; and observe that all input displays as expected.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Appending to a File in Haxe</title>
          <link href="http://ashes999.github.io/learnhaxe/appending-to-a-file-in-haxe" />
      		<id>urn:uuid:4b7bda57b940ac159b93bc734983c4cb</id>
      		<updated>2015-12-28T00:00:00Z</updated>
      		<summary>Appending to a File in Haxe</summary>
      		<content type="xhtml">
      			&lt;p&gt;It's not obvious how to append to a file in Haxe. If you check the &lt;a href="http://api.haxe.org/sys/io/File.html"&gt;sys.io.File API&lt;/a&gt;, you'll find an &lt;a href="http://api.haxe.org/sys/io/File.html#append"&gt;append method&lt;/a&gt;, which looks promising, but outputs an instance of &lt;code&gt;FileOutput&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FileOutput&lt;/code&gt; &lt;a href="http://api.haxe.org/sys/io/FileOutput.html"&gt;API&lt;/a&gt; looks pretty sparse and unusable, until you click on the &lt;a href="http://api.haxe.org/haxe/io/Output.html"&gt;base-class &lt;code&gt;Output&lt;/code&gt; API&lt;/a&gt;. There, you see promising methods, like &lt;a href="http://api.haxe.org/haxe/io/Output.html#writeString"&gt;&lt;code&gt;writeString&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To combine these together, you can append a string to a file like so (don't forget to close the output stream):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public function append(message:String, fileName:String) {
  var output:FileOutput = sys.io.File.append(fileName, false);
  output.writeString(message);
  output.close()
}&lt;/code&gt;&lt;/pre&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Embedding Fonts in HaxeFlixel with FlxText</title>
          <link href="http://ashes999.github.io/learnhaxe/embedding-fonts-in-haxeflixel-with-flxtext" />
      		<id>urn:uuid:e1c872bc8e22d9121f7396c6b441aef0</id>
      		<updated>2015-12-22T00:00:00Z</updated>
      		<summary>Embedding Fonts in HaxeFlixel with FlxText</summary>
      		<content type="xhtml">
      			&lt;p&gt;The &lt;a href="api.haxeflixel.com/flixel/text/FlxText.html"&gt;FlxText class&lt;/a&gt; provides three ways to set the font:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;By setting the &lt;a href="http://api.haxeflixel.com/flixel/text/FlxText.html#font"&gt;font field&lt;/a&gt; to a font name (eg. &lt;code&gt;Times New Roman&lt;/code&gt;). This works with embedded fonts (TTF file is in &lt;code&gt;Assets&lt;/code&gt; and included in the final binaries)&lt;/li&gt;&lt;li&gt;By setting the &lt;a href="http://api.haxeflixel.com/flixel/text/FlxText.html#systemFont"&gt;systemFont field&lt;/a&gt; to a font name. This only works with system fonts, which can be tricky if your app has to work across Windows and Linux, or across mobile and desktop. There's a small list of &lt;a href="http://webdesign.about.com/od/fonts/qt/web-safe-fonts.htm"&gt;web safe fonts&lt;/a&gt; which you can try.&lt;/li&gt;&lt;li&gt;By calling the &lt;a href="http://api.haxeflixel.com/flixel/text/FlxText.html#setFormat"&gt;setFormat method&lt;/a&gt;. You can specify lots of properties together; in particular, you can specify the path to a TTF file, eg. &lt;code&gt;setFormat("assets/MyCustomFont.ttf", ...)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The third method strikes me as the most maintainable, because it's &lt;strong&gt;immediately obvious which font you're using&lt;/strong&gt;, and where that font file originates from. With system fonts and embedded fonts, if the font doesn't work, it's more work to triage and isolate exactly where the problem lies (did you add the font file to &lt;code&gt;Assets&lt;/code&gt;? Is it embedding properly? Did you specify the correct name? Does it work on other targets?).&lt;/p&gt;
&lt;p&gt;The third method also has the best chance to be consistent and cross-platform compatible (by virtue of using embedded fonts), because you're not relying on whatever fonts might be included in the device's system.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.google.com/fonts"&gt;Google Fonts&lt;/a&gt; provides a wealth of fonts which you can use.  You can download all of them (as TTF and OTF) and embed them in your HaxeFlixel games.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>Properties and Dynamic</title>
          <link href="http://ashes999.github.io/learnhaxe/properties-and-dynamic" />
      		<id>urn:uuid:16fb3f8251b8e3556573f1f1773341ff</id>
      		<updated>2015-12-10T00:00:00Z</updated>
      		<summary>Properties and Dynamic</summary>
      		<content type="xhtml">
      			&lt;p&gt;While reading through the &lt;a href="http://haxe.org/manual/"&gt;Haxe manual&lt;/a&gt; (which, by the way, is a good reference, but not a good learning resource), I stumbled upon &lt;a href="http://haxe.org/manual/class-field-property-type-system-impact.html"&gt;this page about properties&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The presence of properties has several consequences on the type system. Most importantly, it is necessary to understand that properties are a compile-time feature and thus &lt;strong&gt;require the types to be known.&lt;/strong&gt; If we were to assign a class with properties to &lt;code&gt;Dynamic&lt;/code&gt;, field access would &lt;strong&gt;not&lt;/strong&gt; respect accessor methods. Likewise, access restrictions no longer apply and all access is virtually public.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(If you don't understand properties yet, go and read &lt;a href="http://haxe.org/manual/class-field-property.html"&gt;this&lt;/a&gt; and &lt;a href="http://haxe.org/manual/class-field-property-common-combinations.html"&gt;this&lt;/a&gt; first.) This example demonstrates how this works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Test {
    static function main() {
        var p = new Props();
        p.x = 35;
        trace('p.x is ${p.x}');

        var p2:Dynamic = new Props();
        p2.x = 35;
        trace('p2.x is ${p2.x}');
    }
}

class Props {
    public function new() { }
    public var x(get, set):Int;

    function get_x() : Int
    {
        return -1;
    }

    function set_x(x:Int) : Int
    {
        return -2;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You can also try &lt;a href="http://try.haxe.org/#CA2Cf"&gt;this example online&lt;/a&gt;.) The output is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;16:42:46:878   p.x is -1
16:42:46:878   p2.x is 35&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the Haxe runtime knows that &lt;code&gt;p&lt;/code&gt; is an instance of &lt;code&gt;Props&lt;/code&gt;, it can apply the getter/setter functions. Because &lt;code&gt;p2&lt;/code&gt; is typed as &lt;code&gt;Dynamic&lt;/code&gt;, the runtime doesn't respect the field access. (In this case, the runtime treats the field like a regular field or public variable.)&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;Dynamic&lt;/code&gt; judiciously, and tread carefully if you use it on instances of classes that have properties. If you rely on your getter/setter to set up certain invariants about your properties, you  may find them no longer respected.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	<entry>
      		<title>FileStat.ctime on Unix</title>
          <link href="http://ashes999.github.io/learnhaxe/filestat-ctime-on-unix" />
      		<id>urn:uuid:832822d4e3e67ec64d48b7ca440a3f9f</id>
      		<updated>2015-12-01T00:00:00Z</updated>
      		<summary>FileStat.ctime on Unix</summary>
      		<content type="xhtml">
      			&lt;p&gt;The &lt;a href="http://api.haxe.org/sys/FileStat.html#ctime"&gt;API docs for sys.FileStat&lt;/a&gt; state that &lt;code&gt;ctime&lt;/code&gt; returns &lt;code&gt;the creation time for the file (not all filesystems support this)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This returns correctly on Windows, but not on Linux (I tested with both &lt;code&gt;cpp&lt;/code&gt; and &lt;code&gt;neko&lt;/code&gt; targets).&lt;/p&gt;
&lt;p&gt;Windows stores the file creation time. On Linux, the story is more complicated. &lt;code&gt;ctime&lt;/code&gt; is a C++ API. Windows stores the file creation time.  On Linux, according to &lt;a href="http://unix.stackexchange.com/a/20464/64805"&gt;this Unix SE question&lt;/a&gt; (which is mostly derived from &lt;code&gt;man&lt;/code&gt; pages):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most unices do not have a concept of file creation time. [...]
Note that &lt;strong&gt;the ctime&lt;/strong&gt; (&lt;code&gt;ls -lc&lt;/code&gt;) &lt;strong&gt;is not the file creation time&lt;/strong&gt;, it's the &lt;a href="http://en.wikipedia.org/wiki/Inode"&gt;inode&lt;/a&gt; change time. The inode change time is updated whenever anything about the file changes (contents or metadata) except that the ctime isn't updated when the file is merely read (even if the atime is updated). In particular, the ctime is always more recent than the mtime (file content modification time) unless the mtime has been explicitly set to a date in the future.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I couldn't trace the Haxe source all the way down the stack, but I believe it does access the Unix &lt;code&gt;ctime&lt;/code&gt; on Unix. This leaves us in a bind: how do we know the file creation time on Unix?&lt;/p&gt;
&lt;p&gt;One option I came up with is to use &lt;a href="http://api.haxe.org/sys/io/Process.html"&gt;sys.io.Process&lt;/a&gt; to fork a process, execute a command like &lt;code&gt;stat&lt;/code&gt; to get the file time, and parse the output. This is possible, but on Ubuntu 14.04, I tested this, and the file birth time is unknown (the filesystem doesn't store it). This is also expensive, and the results should be cached.&lt;/p&gt;
&lt;p&gt;If this is not possible or performant, the other option may be to store the time somewhere yourself. I ran into this while creating &lt;a href="http://github.com/ashes999/butterfly"&gt;Butterfly&lt;/a&gt;, a static blog generator which uses file time to guess the blog post publish date. Jekyll (a similar, Ruby based appliaction) requires users enter the post time in the filename.&lt;/p&gt;
&lt;p&gt;There may be other solutions, but I don't know of any.&lt;/p&gt;
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry>
      	</feed>