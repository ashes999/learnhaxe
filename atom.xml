<?xml version="1.0" encoding="utf-8"?>
      <feed xmlns="http://www.w3.org/2005/Atom">
        <title>Learn Haxe</title>
        <id>urn:uuid:51e6386ca9155b4889db67f17ba6089f</id>
  	    <updated>2015-12-01T00:00:00Z</updated><entry>
      		<title>Filestat Ctime on Unix</title>
      		<id>urn:uuid:fcb6cf468312b74675ed31c2cc1f756c</id>
      		<updated>2015-12-01T00:00:00Z</updated>
      		<summary>Filestat Ctime on Unix</summary>
      		<content type="xhtml">
      			<p>The <a href="http://api.haxe.org/sys/FileStat.html#ctime">API docs for sys.FileStat</a> state that <code>ctime</code> returns <code>the creation time for the file (not all filesystems support this)</code>.</p>
<p>This returns correctly on Windows, but not on Linux (I tested with both <code>cpp</code> and <code>neko</code> targets).</p>
<p>Windows stores the file creation time. On Linux, the story is more complicated. <code>ctime</code> is a C++ API. Windows stores the file creation time.  On Linux, according to <a href="http://unix.stackexchange.com/a/20464/64805">this Unix SE question</a> (which is mostly derived from <code>man</code> pages):</p>
<blockquote>
<p>Most unices do not have a concept of file creation time. [...]
Note that <strong>the ctime</strong> (<code>ls -lc</code>) <strong>is not the file creation time</strong>, it's the <a href="http://en.wikipedia.org/wiki/Inode">inode</a> change time. The inode change time is updated whenever anything about the file changes (contents or metadata) except that the ctime isn't updated when the file is merely read (even if the atime is updated). In particular, the ctime is always more recent than the mtime (file content modification time) unless the mtime has been explicitly set to a date in the future.</p></blockquote>
<p>I couldn't trace the Haxe source all the way down the stack, but I believe it does access the Unix <code>ctime</code> on Unix. This leaves us in a bind: how do we know the file creation time on Unix?</p>
<p>One option I came up with is to use <a href="http://api.haxe.org/sys/io/Process.html">sys.io.Process</a> to fork a process, execute a command like <code>stat</code> to get the file time, and parse the output. This is possible, but on Ubuntu 14.04, I tested this, and the file birth time is unknown (the filesystem doesn't store it). This is also expensive, and the results should be cached.</p>
<p>If this is not possible or performant, the other option may be to store the time somewhere yourself. I ran into this while creating <a href="http://github.com/ashes999/butterfly">Butterfly</a>, a static blog generator which uses file time to guess the blog post publish date. Jekyll (a similar, Ruby based appliaction) requires users enter the post time in the filename.</p>
<p>There may be other solutions, but I don't know of any.</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Using a Haxelib in Haxe</title>
      		<id>urn:uuid:830b23882926fc96c5abd3735dbcb93c</id>
      		<updated>2015-11-29T00:00:00Z</updated>
      		<summary>Using a Haxelib in Haxe</summary>
      		<content type="xhtml">
      			<p>Haxe includes a built-in package manager, <a href="http://haxe.org/manual/haxelib.html">haxelib</a>. You can install, upgrade, and manage libraries <a href="http://lib.haxe.org/">via the command-line</a>.</p>
<p>Once you install a library through haxelib, you need to tell the compiler to include it when you compile. As mentioned <a href="http://haxe.org/manual/haxelib-using-haxe.html">on this page</a>, you specify the library via the command-line:</p>
<p><code>haxe -lib &lt;libName&gt; ...</code></p>
<p>This includes the library code. Don't forget to add the relevant <code>import ...</code> statements to include library classes (if the library uses packages).</p>
<p>To include multiple libraries, just add more <code>-lib &lt;foo&gt;</code> arguments.</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Trim Replace and More Haxe String Extensions</title>
      		<id>urn:uuid:36b26814652785ed97e62def60fc2be5</id>
      		<updated>2015-11-28T00:00:00Z</updated>
      		<summary>Trim Replace and More Haxe String Extensions</summary>
      		<content type="xhtml">
      			<p>Haxe includes convenient string-modification methods like <code>trim</code> and <code>replace</code>. They don't exist on the <code>String</code> class by default, but need to be included via the <code>StringTools</code> extension:</p>
<pre><code>import StringTools;</code></pre>
<p>Like C#, this is a static extension (syntactic sugar); you can find the full list of extension methods on the <a href="http://api.haxe.org/StringTools.html">StringTools API page</a>.</p>
<p>You can learn more about static extensions via the <a href="http://haxe.org/manual/lf-static-extension.html">Static Extensions documentation page</a>.</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Sorting an Array of Strings in Haxe</title>
      		<id>urn:uuid:0999daa431699b363238889657b7233d</id>
      		<updated>2015-11-28T00:00:00Z</updated>
      		<summary>Sorting an Array of Strings in Haxe</summary>
      		<content type="xhtml">
      			<p>To sort an array of strings alphabetically, you can use the <code>Array.Sort</code> method (see: <a href="http://api.haxe.org/Array.html#sort">API</a>). It takes a function parameter <code>f(a, b)</code> that returns a negative integer if <code>a</code> is greater, zero if <code>a</code> and <code>b</code> are equal, and a positive integer if <code>b</code> is greater.</p>
<p>To sort the array, you can use this method:</p>
<pre><code>someArray.sort(function(a:String, b:String):Int {
  a = a.toUpperCase();
  b = b.toUpperCase();

  if (a &lt; b) {
    return -1;
  }
  else if (a &gt; b) {
    return 1;
  } else {
    return 0;
  }
});</code></pre>
<p>Alternatively, you can create the function <code>sortAlphabetically(a:String, b:String):Int</code> and call <code>someArray.sort(sortAlphabetically)</code>.</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Recursively Delete a Directory in Haxe</title>
      		<id>urn:uuid:23277b25e7c3ac0e5be838bc9596f7af</id>
      		<updated>2015-11-28T00:00:00Z</updated>
      		<summary>Recursively Delete a Directory in Haxe</summary>
      		<content type="xhtml">
      			<p>Haxe doesn't include any built-in APIs to delete a directory recursively (including all subdirectories and files). Although the <code>sys.FileSystem</code> class <a href="http://api.haxe.org/sys/FileSystem.html#deleteDirectory">includes a deleteDirectory method</a>, it throws an exception if the directory contains subdirectories or files.</p>
<p>This code recursively deletes directories and their contents:</p>
<pre><code>private function deleteDirRecursively(path:String) : Void
{
  if (sys.FileSystem.exists(path) &amp;&amp; sys.FileSystem.isDirectory(path))
  {
    var entries = sys.FileSystem.readDirectory(path);
    for (entry in entries) {
      if (sys.FileSystem.isDirectory(path + '/' + entry)) {
        deleteDirRecursively(path + '/' + entry);
        sys.FileSystem.deleteDirectory(path + '/' + entry);
      } else {
        sys.FileSystem.deleteFile(path + '/' + entry);
      }
    }
  }
}</code></pre>
<p>It works by deleting all files in a directory, and by recursively deleting subdirectories and removing them if they have contents.</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Reading Command Line Arguments in Haxe</title>
      		<id>urn:uuid:c62d47e8387759b2fe0c964e78e208c4</id>
      		<updated>2015-11-27T00:00:00Z</updated>
      		<summary>Reading Command Line Arguments in Haxe</summary>
      		<content type="xhtml">
      			<p>To read from the command line, use the <code>Sys.args()</code> call. It returns an array of arguments:</p>
<pre><code>var args = Sys.args();
var firstArg = args[0];
// ...</code></pre>
<p>This works when you compile and execute your Haxe code. For example, if you compile a <code>Main.hx</code> class with neko, and then run <code>neko Main.n --debug trace</code>, you get the array <code>["--debug", "trace"]</code>.</p>
<p>However, it doesn't work with <code>--interp</code>. If you run <code>haxe -main Main --interp</code>, you get the array <code>["-main", "Main", "--interp"]</code>. Trying to append any more arguments will result in the error <code>Could not process argument &lt;foo&gt;</code></p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Check if a Directory Exists Haxe</title>
      		<id>urn:uuid:8bc1b122afd9fc35914118ccbf6085bb</id>
      		<updated>2015-11-27T00:00:00Z</updated>
      		<summary>Check if a Directory Exists Haxe</summary>
      		<content type="xhtml">
      			<p>To check if a directory exists, you can use <code>sys.FileSystem.exists(path)</code>. This returns true if a file <em>or directory</em> exists at the specified path.</p>
<p>To be sure it's a directory, you can also include <code>sys.FileSystem.isDirectory(path)</code>. You can combine them together:</p>
<pre><code>if (sys.FileSystem.exists(path) &amp;&amp; sys.FileSystem.isDirectory(path)) {
  // path exists and is a directory
} else {
  // path doesn't exist, or is a file or something else
}</code></pre>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Exit From the Command Line in Haxe</title>
      		<id>urn:uuid:c71b679fb94346ab815d1a1cd5a0f55b</id>
      		<updated>2015-11-27T00:00:00Z</updated>
      		<summary>Exit From the Command Line in Haxe</summary>
      		<content type="xhtml">
      			<p>To exit from the command-line in Haxe, you can use <code>Sys.exit(n)</code>, where <code>n</code> is the exit code. (<code>0</code> indicates normal termination, and anything non-zero is usually treated as an error.)</p>
<p>Note that this is not <code>sys.exit(n)</code> (with a lower-case S -- the <code>sys</code> package), but <code>Sys</code>, <a href="http://api.haxe.org/Sys.html">the class</a> that provides access to system APIs.</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Namespaces and Class Names in Haxe</title>
      		<id>urn:uuid:ebd9019e8a03775a87f9cec8104ce184</id>
      		<updated>2015-11-27T00:00:00Z</updated>
      		<summary>Namespaces and Class Names in Haxe</summary>
      		<content type="xhtml">
      			<p>In Haxe, namespaces are called packages, and classes are upper-case. If you want to create a <code>MersenneTwister</code> class in a <code>com.foo.bar.random</code> package, it looks like this:</p>
<pre><code>package com.foo.bar.random;

class MersenneTwister {
  // ...
}</code></pre>
<p>Like Java, Haxe expects class names to start with an upper-case letter.  Also like Java, Haxe expects the directory structure and package to match. For the above example, you place <code>MersenneTwister.hx</code> in the directory <code>/com/foo/bar/random</code>.</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry><entry>
      		<title>Setting the Image on a Haxeflixel Flxbutton</title>
      		<id>urn:uuid:b8bb1123150575a008001882eab7fc3a</id>
      		<updated>2015-04-09T00:00:00Z</updated>
      		<summary>Setting the Image on a Haxeflixel Flxbutton</summary>
      		<content type="xhtml">
      			<p><code>FlxButton</code> is a hybrid of an image and a text object. You can set both properties separately:</p>
<pre><code>var button = new FlxButton(0, 0, "Click Me!", myCallback);
// Load a custom image
button.loadGraphic("assets/images/blue-button.png");
button.label.setFormat("assets/fonts/awesome-font.ttf", 20, FlxColor.WHITE);</code></pre>
<p>This code:</p><ul><li>Creates a new button with "Click Me!" as the caption</li><li>Sets the background image to <code>assets/images/blue-button.png</code></li><li>Sets the font to a custom font, white letters, size 20</li></ul>
<p>You can also create a button from a spritesheet. From <a href="http://coinflipstudios.com/devblog/?p=225">this blog post</a>:</p>
<pre><code>button.loadGraphic("assets/images/button-spritesheet.png", false, 128, 128);</code></pre>
<p>This creates a button using <code>button-spritesheet.png</code>. It uses 128x128 as the frame size; so the first 128x128 is the "normal" sprite, the next 128x128 frame is the "mouse over" sprite, and the last frame is the "clicked" sprite. You can see what that looks like <a href="http://coinflipstudios.com/devblog/?p=225">from the same blog post</a> (scroll all the way to the end).</p>
      		</content>
      		<author>
      			<name>ashes999</name>
      			<email>ashes999@yahoo.com</email>
      		</author>
      	</entry></feed>